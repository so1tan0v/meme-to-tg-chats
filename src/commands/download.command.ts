import TelegramBot from 'node-telegram-bot-api';import { ContentService } from '../services/content.service';import { bot } from '../bot';import { UsersLinksService } from '../services/users_links.service';import { UsersService } from '../services/users.service';import { isEmpty } from 'lodash';import { getFileSizeToRead } from '../utils/helper';export async function downloadCommand(msg: TelegramBot.Message, isLocalMessage: boolean = false) {    const textMessage = msg.text;    if (!textMessage) return;    const chatId = msg?.chat?.id;    const userName = msg.from?.username ?? 'НЕИЗВЕСТНО';    const messageId = msg.message_id;    const user = await UsersService.getByChatId(chatId);    let url = '';    let message = '';    textMessage.split(' ').forEach((item, index) => {        if (index === 0) url = item;        else message += ' ' + item;    });    if (!ContentService.isUrl(url)) {        return;    }    const startMessage = await bot.sendMessage(chatId, 'Начал скачивать видео...', {        parse_mode: 'Markdown',        disable_notification: true,    });    let downloadedVideo;    for (let i = 0; i < 5; i++) {        downloadedVideo = await ContentService.getVideoFileByUrl(url, isLocalMessage);        if (downloadedVideo.success) break;    }    if (downloadedVideo) {        if (downloadedVideo.success && downloadedVideo.file) {            await bot.sendVideo(chatId, downloadedVideo.file, {                caption: `От пользователя <b>@${userName}</b> (<a href="${url}">источник</a>) ${message ? `\n${message}` : ''}`,                parse_mode: 'HTML',                disable_notification: true,            });            if (messageId) {                try {                    await bot.deleteMessage(chatId, messageId);                } catch (e) {                    console.error(e);                }            }        }        const messageFromDownload = downloadedVideo.message;        if (!downloadedVideo.success && !downloadedVideo.options) {            const defaultMessageOnError =                'Ошибка при запросе видео. Скорее всего не получилось скачать видео, пиши @so1tan0v';            await bot.sendMessage(chatId, messageFromDownload ?? defaultMessageOnError);        } else if (messageFromDownload) {            await bot.sendMessage(chatId, messageFromDownload, { parse_mode: 'HTML' });        }        if (downloadedVideo.options && !isEmpty(downloadedVideo.options)) {            try {                const optionKeyboard: TelegramBot.InlineKeyboardButton[][] = [];                for (const option of downloadedVideo.options) {                    await UsersLinksService.create({                        code: option.code,                        url: option.url,                        user_id: user?.data.id ?? 1,                    });                    optionKeyboard.push([                        {                            text: `${option.format_note as string} (${option.filesize ? getFileSizeToRead(option.filesize) : `Не определен размер файла`} )`,                            callback_data: option.code,                        },                    ]);                }                await bot.sendMessage(                    chatId,                    'Выберите свойство\n(Выбор скудный, ибо в API надо объединять видео и аудио чтобы все разрешения получать)',                    {                        reply_markup: {                            inline_keyboard: optionKeyboard,                        },                    },                );            } catch (e) {                console.error(e);            }        }    }    if (startMessage && startMessage.message_id) {        try {            await bot.deleteMessage(chatId, startMessage.message_id);        } catch (e) {            console.error(e);        }    }}