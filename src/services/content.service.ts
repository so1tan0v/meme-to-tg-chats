import * as cheerio from 'cheerio';import download from 'download';import youtubeDl from 'youtube-dl-exec';import { BrowserService } from './browser.service';import { v4 } from 'uuid';import { Quality } from './content.interface';interface IGetVideoResult {    success: boolean;    file: Buffer | null;    message: string | null;    options: Quality[];}export class ContentService {    static isUrl(url: string): boolean {        return !!(url && url.indexOf('http') === 0 && url.split(' ').length === 1);    }    static async getFileFromInstagram(url: string) {        const result: IGetVideoResult = {            success: true,            file: null,            message: null,            options: [],        };        let siteContent;        try {            siteContent = await BrowserService.fetchPageContent(url);        } catch (e) {            result.success = false;            result.message = 'При открытии ссылки с видео:\n ``` ' + JSON.stringify(e) + '```';            return result;        }        const $ = cheerio.load(siteContent, {});        const $video = $('video');        if (!$video.length) {            try {                siteContent = await BrowserService.fetchPageContent(url);            } catch (e) {                result.success = false;                result.message = 'При открытии ссылки с видео:\n ``` ' + JSON.stringify(e) + '```';                return result;            }            const $ = cheerio.load(siteContent, {});            const $video = $('video');            if (!$video.length) {                result.success = false;                result.message =                    'При скачивании видео произошла ошибка:\n ``` Не удалось скачать видео ```';                return result;            }        }        const urlVideo = $video.attr('src');        if (urlVideo) {            result.file = await download(urlVideo);            return result;        } else {            result.success = false;            result.message =                'При скачивании видео произошла ошибка:\n ```Не удалось обнаружить ссылку на видео```';            return result;        }    }    static async getFileFromYouTube(url: string, offerDownloadVideoQuality: boolean = false) {        const result: IGetVideoResult = {            success: true,            file: null,            message: null,            options: [],        };        try {            if (!url.includes('shorts') && !offerDownloadVideoQuality) return result;            const video = await youtubeDl(url, {                dumpSingleJson: true,                noCheckCertificates: true,                noWarnings: true,                addHeader: ['referer:youtube.com', 'user-agent:googlebot'],            });            const availableVideos = video.formats.filter(                (format) => format.url && format.acodec !== 'none' && format.vcodec !== 'none',            );            if (url.includes('shorts')) {                if (availableVideos[availableVideos.length - 1]) {                    result.file = await download(availableVideos[availableVideos.length - 1].url);                }            } else if (offerDownloadVideoQuality) {                const uuid = v4();                const qualityData: Quality[] = availableVideos.map((item) => {                    const fileSize = item?.downloader_options?.http_chunk_size                        ? +item?.downloader_options?.http_chunk_size                        : item.filesize;                    return {                        ext: item.ext,                        url: item.url,                        code: `download_${uuid}-${item.format_note}`,                        format_note: item.format_note,                        filesize: fileSize,                        resolution: item.resolution,                    };                });                result.success = false;                result.message = null;                result.options = qualityData;            }        } catch (e) {            const errorMessage = JSON.stringify(e) ?? 'Не удалось получить ошибку';            result.success = false;            result.message =                'При скачивании видео с youtube произошел отвал: ``` ' + errorMessage + ' ```';        }        return result;    }    static async getVideoFileByUrl(url: string, isLocalMessage: boolean = false) {        let result: IGetVideoResult = {            success: true,            file: null,            message: null,            options: [],        };        if (!ContentService.isUrl(url)) {            result.success = false;            result.message = 'Это не ссылка.';        }        if (url.indexOf('instagram') !== -1) {            result = await this.getFileFromInstagram(url);        } else if (url.indexOf('youtube') !== -1 || url.indexOf('youtu.be') !== -1) {            result = await this.getFileFromYouTube(url, isLocalMessage);        } else if (url.indexOf('vk.com') !== -1) {            result.success = false;            result.message = 'VK это отвал.';        }        return result;    }}